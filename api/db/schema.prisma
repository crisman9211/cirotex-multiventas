datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  uid         String      @unique
  email       String      @unique
  name        String
  phoneNumber String?
  address     String?
  userClient  UserClient?
  userAdmin   UserAdmin?
}

model UserClient {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber  String?
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique @db.ObjectId
  shoppingCart shoppingCart?
  order        Order[]
}

model UserAdmin {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
  role   Role
}

enum Role {
  ADMIN
}

model Product {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  imgURL       String
  price        Float
  isAvailable  Boolean
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  productItem  ProductItem[]
  StockProduct StockProduct?
}

model ProductItem {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  product        Product       @relation(fields: [productId], references: [id])
  productId      String        @db.ObjectId
  quantity       Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shoppingCart   shoppingCart? @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId String?       @db.ObjectId
  order          Order?        @relation(fields: [orderId], references: [id])
  orderId        String?       @db.ObjectId
}

model shoppingCart {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userClient   UserClient    @relation(fields: [userClientId], references: [id])
  userClientId String        @unique @db.ObjectId
  productItem  ProductItem[]
  isAvailable  Boolean
  createdAt    DateTime      @default(now())
}

model Order {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userClient   UserClient    @relation(fields: [userClientId], references: [id])
  userClientId String        @db.ObjectId
  productItem  ProductItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  totalPrice   Float         @default(0)
  status       OrderStatus
}

enum OrderStatus {
  new       @map("NEW")
  hold      @map("HOLD")
  shipped   @map("SHIPPED")
  delivered @map("DELIVERED")
  cancelled @map("CANCELLED")
  rejected  @map("REJECTED")
}

model Stock {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  stockProduct StockProduct[]
}

model StockProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stock     Stock    @relation(fields: [stockId], references: [id])
  stockId   String   @db.ObjectId
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique @db.ObjectId
}
